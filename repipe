#!/bin/bash

read -r -d '' template <<'EOF'
- type: replace
  path: /jobs/-
  value:
    name: ((name))
    plan:
    - get: repo
      trigger: true
      resource: repo-((name))
    - put: credhub
      resource: credhub-((name))
      params:
        schema_file: repo/((name))/schema.yml
    - put: concourse
      params:
        pipelines:
        - name: ((name))
          team: main
          config_file: repo/((name))/pipeline.yml
- type: replace
  path: /resources/-
  value:
    name: repo-((name))
    type: git
    source:
      uri: "https://github.com/starkandwayne/bucc-pipelines"
      paths: ["((name))/*"]
      branch: base-pipeline
- type: replace
  path: /resources/-
  value:
    name: credhub-((name))
    type: credhub-schema
    source:
      server: ((credhub_url))
      client_name: ((credhub_username))
      client_secret: ((credhub_password))
      ca_cert: ((credhub_ca_cert))
      path: /concourse/main/((name))
EOF

read -r -d '' base <<'EOF'
jobs: []

resources:
- name: concourse
  type: concourse-pipeline
  source:
    target: ((concourse_url))
    insecure: "true"
    teams:
    - name: main
      username: ((concourse_username))
      password: ((concourse_password))

resource_types:
- name: concourse-pipeline
  type: docker-image
  source:
    repository: concourse/concourse-pipeline-resource
    tag: latest

- name: credhub-schema
  type: docker-image
  source:
    repository: rkoster/credhub-schema-resource
    tag: latest
EOF

fly -t bucc set-pipeline -p base -c \
    <(bosh int <(echo -e "${base}") -o \
           <(for pipeline in $(find * -type d -maxdepth 1); do
                 bosh int <(echo -e "${template}") -v name="${pipeline}"
             done))
